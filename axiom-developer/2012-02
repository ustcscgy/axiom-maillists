From MAILER-DAEMON Fri Feb 17 20:38:45 2012
Received: from list by lists.gnu.org with archive (Exim 4.71)
	id 1RyZG9-0004nr-L0
	for mharc-axiom-developer@gnu.org; Fri, 17 Feb 2012 20:38:45 -0500
Received: from eggs.gnu.org ([140.186.70.92]:55892)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <gdr@cs.tamu.edu>) id 1RyZG6-0004nl-I8
	for axiom-developer@nongnu.org; Fri, 17 Feb 2012 20:38:44 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <gdr@cs.tamu.edu>) id 1RyZG3-0004z0-U0
	for axiom-developer@nongnu.org; Fri, 17 Feb 2012 20:38:42 -0500
Received: from smtp.cs.tamu.edu ([128.194.138.107]:47472)
	by eggs.gnu.org with esmtp (Exim 4.71)
	(envelope-from <gdr@cs.tamu.edu>) id 1RyZG3-0004yr-J3
	for axiom-developer@nongnu.org; Fri, 17 Feb 2012 20:38:39 -0500
Received: from gauss.cs.tamu.edu (gauss.cs.tamu.edu [128.194.136.74])
	by smtp.cs.tamu.edu (Postfix) with ESMTP id 49A0B190003;
	Fri, 17 Feb 2012 19:38:36 -0600 (CST)
Received: by gauss.cs.tamu.edu (Postfix, from userid 1000)
	id 3795A14C532; Fri, 17 Feb 2012 19:38:36 -0600 (CST)
From: Gabriel Dos Reis <gdr@cs.tamu.edu>
To: open-axiom-devel@lists.sf.net
Organization: Texas A&M University
Sender: gdr@cs.tamu.edu
Date: Fri, 17 Feb 2012 19:38:36 -0600
Message-ID: <874nuox6n7.fsf@gauss.cs.tamu.edu>
Lines: 373
MIME-Version: 1.0
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: quoted-printable
X-detected-operating-system: by eggs.gnu.org: Solaris 10 (beta)
X-Received-From: 128.194.138.107
Cc: fricas-devel@googlegroups.com, open-axiom-announce@lists.sf.net,
	axiom-developer@nongnu.org
Subject: [Axiom-developer] CICM 2012: Last Call for Papers
X-BeenThere: axiom-developer@nongnu.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: Axiom Developers <axiom-developer.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/axiom-developer>, 
	<mailto:axiom-developer-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/axiom-developer>
List-Post: <mailto:axiom-developer@nongnu.org>
List-Help: <mailto:axiom-developer-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/axiom-developer>,
	<mailto:axiom-developer-request@nongnu.org?subject=subscribe>
X-List-Received-Date: Sat, 18 Feb 2012 01:38:44 -0000


         CICM 2012 - Conference on Intelligent Computer Mathematics
           July 9-13, 2012 at Jacobs University, Bremen, Germany

              http://www.informatik.uni-bremen.de/cicm2012/
=20=20
                             Call for Papers
----------------------------------------------------------------

As computers and communications technology advance, greater
opportunities arise for intelligent mathematical computation. While
computer algebra, automated deduction, mathematical publishing and
novel user interfaces individually have long and successful histories,
we are now seeing increasing opportunities for synergy among these
areas. The Conference on Intelligent Computer Mathematics offers a
venue for discussing these areas and their synergy.

The conference will be organized by Serge Autexier and Michael
Kohlhase at Jacobs University in Bremen and consist of five tracks:

Artificial Intelligence and Symbolic Computation (AISC)
  Co-Chairs: John A. Campbell, Jacques Carette
Calculemus
  Chair: Gabriel Dos Reis
Digital Mathematical Libraries (DML)
  Chair: Petr Sojka
Mathematical Knowledge Management (MKM)
  Chair: Makarius Wenzel
Systems and Projects
  Chair: Volker Sorge
=20=20
The overall programme will be organized by the General Program Chair
Johan Jeuring.

Invited talks will be given by:

Yannis Haralambous, D=C3=A9partement Informatique, T=C3=A9l=C3=A9com Bretag=
ne
Conor McBride, Department of Computer and Information Sciences,=20
  University of Strathclyde
Cezar Ionescu, Potsdam Institute for Climate Impact Research

----------------------------------------------------------------
                             Important dates
----------------------------------------------------------------

Abstract submission:          20 February 2012
Submission deadline:          26 February 2012
Reviews sent to authors:     23 March 2012
Rebuttals due:                     30 March 2012
Notification of acceptance: 6  April 2012
Camera ready copies due:   20 April 2012
Conference:                         9-13 July 2012

----------------------------------------------------------------
                               Tracks
----------------------------------------------------------------

*** AISC ***

Symbolic computation can be roughly described as the study of
algorithms which operate on expression trees. Another way to phrase
this is to say that the denotational semantics of expressions trees is
not fixed, but is rather context dependent. Expression simplification
is probably the archetypal symbolic computation. Mathematically
oriented software (such as the so-called computer algebra systems)
have been doing this for decades, but not long thereafter, systems
doing proof planning and theorem discovery also started doing the
same; some attempts at knowledge management and 'expert systems' were
also symbolic, but less successfully so. More recently, many different
kinds of program analyses have gotten `symbolic', as well as some of
the automated theorem proving (SMT, CAV, etc).

But a large number of the underlying problems solved by symbolic
techniques are well known to be undecidable (never mind the many that
are EXP-time complete, etc). Artificial Intelligence has been
attacking many of these different sub-problems for quite some time,
and has also built up a solid body of knowledge. In fact, most
symbolic computation systems grew out of AI projects.

These two fields definitely intersect. One could say that in the
intersection lies all those problems for which we have no decision
procedures. In other words, decision procedures mark a definite phase
shift in our understanding, but are not always possible. Yet we still
want to solve certain problems, and must find 'other' means of
(partial) solution. This is the fertile land which comprises the core
of AISC.

Rather than try to exhaustively list topics of interest, it is
simplest to say that AISC seeks work which advances the understanding
of

Solving problems which fundamentally involve the manipulation of
expressions, but for which decision procedures are unlikely to ever
exist.


*** Calculemus ***

Calculemus is a series of conferences dedicated to the integration of
computer algebra systems (CAS) and systems for mechanised reasoning,
the interactive theorem provers or proof assistants (PA) and the
automated theorem provers (ATP). Currently, symbolic computation is
divided into several (more or less) independent branches: traditional
ones (e.g., computer algebra and mechanised reasoning) as well as
newly emerging ones (on user interfaces, knowledge management, theory
exploration, etc.) The main concern of the Calculemus community is to
bring these developments together in order to facilitate the theory,
design, and implementation of integrated systems for computer
mathematics that will routinely be used by mathematicians, computer
scientists and engineers in their every day business.

The topics of interest of Calculemus include but are not limited to:

	* Theorem proving in computer algebra (CAS)
	* Computer algebra in theorem proving (PA and ATP)
	* Case studies and applications that both involve computer
         	algebra and mechanised reasoning
	* Representation of mathematics in computer algebra
	* Adding computational capabilities to PA and ATP
	* Formal methods requiring mixed computing and proving
	* Combining methods of symbolic computation and formal
                 deduction
	* Mathematical computation in PA and ATP
	* Theory, design and implementation of interdisciplinary
        	systems for computer mathematics
	* Theory exploration techniques
	* Input languages, programming languages, types and constraint
    	        languages, and modeling languages for mechanised
    	        mathematics systems (PA, CAS, and ATP).
	* Infrastructure for mathematical services

*** DML ***

Mathematicians dream of a digital archive containing all peer-reviewed
mathematical literature ever published, properly linked, validated and
verified.  It is estimated that the entire corpus of mathematical
knowledge published over the centuries does not exceed 100,000,000
pages, an amount easily manageable by current information
technologies. Following success of DML 2008, DML 2009 DML 2010, and
DML 2011 track objectives are to formulate the strategy and goals of a
global mathematical digital library and to summarize the current
successes and failures of ongoing technologies and related projects as
EuDML, asking such questions as:

	* What technologies, standards, algorithms and formats should
		be used and what metadata should be shared?
	* What business models are suitable for publishers of
		mathematical literature, authors and funders of their
		projects and institutions?
	* Is there a model of sustainable, interoperable, and
		extensible mathematical library that mathematicians
		can use in their everyday work?
	* What is the best practice for
		* retrodigitized mathematics (from images via OCR to
                         MathML or TeX);
		* retro-born-digital mathematics (from existing
			electronic copy in DVI, PS or PDF to MathML or
			TeX);
		* born-digital mathematics (how to make needed
			metadata and file formats available as a side
			effect of publishing workflow [CEDRAM/Euclid
			model])?

DML is an opportunity to share experience and best practices between
projects in any area (MKM, NLP, OCR, pattern recognition, whatever)
that could change the paradigm for searching, accessing, and
interacting with the mathematical corpus. The track is
trans/interdisciplinary and contributions from any kind of people on
any aspect of the DML building are welcome.

*** MKM ***

Mathematical Knowledge Management is an interdisciplinary field of
research in the intersection of mathematics, computer science, library
science, and scientific publishing. The objective of MKM is to develop
new and better ways of managing sophisticated mathematical knowledge,
based on innovative technology of computer science, the Internet, and
intelligent knowledge processing. MKM is expected to serve
mathematicians, scientists, and engineers who produce and use
mathematical knowledge; educators and students who teach and learn
mathematics; publishers who offer mathematical textbooks and
disseminate new mathematical results; and librarians and
mathematicians who catalog and organize mathematical knowledge.

The conference is concerned with all aspects of mathematical knowledge
management. A non-exclusive list of important topics includes:

	* Representations of mathematical knowledge
	* Authoring languages and tools
	* Repositories of formalized mathematics
	* Deduction systems
	* Mathematical digital libraries
	* Diagrammatic representations
	* Mathematical OCR
	* Mathematical search and retrieval
	* Math assistants, tutoring and assessment systems
	* MathML, OpenMath, and other mathematical content standards
	* Web presentation of mathematics
	* Data mining, discovery, theory exploration
	* Computer algebra systems
	* Collaboration tools for mathematics
	* Challenges and solutions for mathematical workflows
=09
*** Systems and Projects ***

The Systems and Projects track of the Conferences on Intelligent
Computer Mathematics is a forum for presentation of systems and new
and ongoing projects in all areas and topics related to the CICM
conferences:

	* AI and Symbolic Computation
	* Deduction and Computer Algebra
	* Mathematical Knowledge Management
	* Digital Mathematical Libraries

The track aims to provide an overview of the latest developments and
trends within the CICM community as well as to exchange ideas between
developers and introduce systems to an audience of potential users.

We solicit submissions for two page abstracts in the categories of
system descriptions and project presentations. System description
should present

	* newly developed systems,
	* systems that have not previously been presented to the CICM
                 community, or
	* significant updates to existing systems.

Project presentation should describe

	* projects that are new or about to start,
	* ongoing projects that have not yet been presented to the
                 CICM community.
	* significant new developments in ongoing previously presented
                 projects.

All submissions should contain links to demos, downloadable systems,
or project pages. Availability of such accompanying material will be a
strong prerequisite for acceptance.

Accepted abstracts will be published in the CICM proceedings in
Springer's LNAI series. Author's are expected to present their
abstracts in 5-10 minute teaser talks followed by an open demo/poster
session. System papers must be accompanied by a system demonstration,
while project papers must be accompanied by a poster presentation.

----------------------------------------------------------------
                              Submitting
----------------------------------------------------------------

Submissions to tracks A to D must not exceed 15 pages and will be
reviewed and evaluated with respect to relevance, clarity, quality,
originality, and impact.  Shorter papers, e.g., for system
descriptions, are welcome. Authors will have an opportunity to respond
to their papers' reviews before the programme committee makes a
decision.

Submissions to the Systems & Projects track must not exceed four
pages. The accepted abstracts will be presented at CICM in a fast
presentation session, followed by an open demo/poster session. System
papers must be accompanied by a system demonstration, and project
papers must be accompanied by a poster presentation. The four pages of
the abstract should be new material, accompanied by links to
demos/downloads/project-pages and [existing] system descriptions.
Availability of such accompanying material will be a strong
prerequisite for acceptance.

Accepted conference submissions from all tracks will be published as a
volume in the series Lecture Notes in Artificial Intelligence (LNAI)
by Springer. In addition to these formal proceedings, authors are
permitted and encouraged to publish the final versions of their papers
on arXiv.org.

Work-in-progress submissions are intended to provide a forum for the
presentation of original work that is not (yet) in a suitable form for
submission as a full or system description paper. This includes work
in progress and emerging trends. Their size is not limited, but we
recommend 5 - 10 pages.

The programme committee may offer authors of rejected formal
submissions to publish their contributions as work-in-progress papers
instead. Depending on the number of work-in-progress papers accepted,
they will be presented at the conference either as short talks or as
posters. The work-in-progress proceedings will be published as a
technical report.

All papers should be prepared in LaTeX and formatted according to the
requirements of Springer's LNCS series (the corresponding style files
can be downloaded from
http://www.springer.de/comp/lncs/authors.html). By submitting a paper
the authors agree that if it is accepted at least one of the authors
will attend the conference to present it.

Electronic submission is done through easychair=20
(http://www.easychair.org/conferences/?conf=3Dcicm2012).

----------------------------------------------------------------
                            Program Committees
----------------------------------------------------------------

General chair: Johan Jeuring (Utrecht University and Open Universiteit
the Netherlands)

AISC track
	John A. Campbell; University College London, UK; Co-chair
	Jacques Carette; McMaster University, Canada; Co-chair
       Serge Autexier; DFKI Bremen, Germany
       Jacques Calmet; University of Karlsruhe, Germany
       Jacques Fleuriot; University of Edinburgh, UK
       Andrea Kohlhase; International University Bremen, Germany
       Erik Postma; Maplesoft Inc., Canada
       Alan Sexton; University of Birmingham, UK
       Chung-chieh Shan; Cornell University, USA.
       Stephen Watt; University of Western Ontario, Canada

Calculemus track
	Gabriel Dos Reis; Texas A&M University, USA; Chair
        Andrea Asperti; University of Bologna, Italy
        Laurent Bernardin; Maplesoft, Canada
        James Davenport; University of Bath, UK
        Ruben Gamboa; University of Wyoming, USA
        Mark Giesbrecht; University of Waterloo, Canada
        Sumit Gulwani; Microsoft Research, USA
        John Harrison; Intel, USA
        Joris van der Hoeven; =C3=89cole Polytechnique, France
        Hoon Hong; North Carolina State University, USA
        Lo=C3=AFc Pottier; INRIA, France
        Wolfgang Windsteiger; RISC, Austria

DML track
        Petr Sojka; Masaryk University, Brno, CZ; Chair
         Jos=C3=A9 Borbinha; Technical University of Lisbon,  PT
        Thierry Bouche; University Grenoble, FR
        Michael Doob; University of Manitoba, Winnipeg, CA
        Thomas Fischer; Goettingen University,  DE
        Yannis Haralambous; T=C3=A9l=C3=A9com Bretagne, FR
        V=C3=A1clav Hlav=C3=A1=C4=8D; Czech Technical University, Prague, CZ
        Michael Kohlhase; Jacobs University Bremen, DE
        Janka Chleb=C3=ADkov=C3=A1; Portsmouth University, UK
        Enrique Maci=C3=A1s-Virg=C3=B3s; University of Santiago de Composte=
la,
          ES
        Bruce Miller; NIST, USA
        Ji=C5=99=C3=AD R=C3=A1kosn=C3=ADk; Academy of Sciences, Prague, CZ
        Eugenio Rocha; University of Aveiro, PT
        David Ruddy; Cornell University, US
        Volker Sorge; University of Birmingham, UK
        Masakazu Suzuki; Kyushu University, JP

MKM track
	Makarius Wenzel; University of Paris-South, France; Chair
        David Aspinall; University of Edinburgh, Scotland
        Jeremy Avigad; Carnegie Mellon University, USA
        Mateja Jamnik; University of Cambridge, UK
        Cezary Kaliszyk; University of Tsukuba, Japan
        Manfred Kerber; University of Birmingham, UK
        Christoph L=C3=BCth; DFKI Bremen, Germany
        Adam Naumowicz; University of Bia=C5=82ystok, Poland
        Jim Pitman; University of California, Berkeley, USA
        Pedro Quaresma; Universidade de Coimbra, Portugal
        Florian Rabe; Jacobs University Bremen, Germany
        Claudio Sacerdoti Coen; University of Bologna, Italy
        Enrico Tassi; INRIA Saclay, France
        Freek Wiedijk; Radboud University Nijmegen, The Netherlands

Systems & Projects track
	Volker Sorge; University of Birmingham, UK; Chair
        Josef Baker; University of Birmingham, UK
        John Charnley; Imperial College, UK
        Manuel Kauers; RISC, Austria
        Koji Nakagawa; Kyushu University, Japan
        Piotr Rudnicki; University of Alberta, Canada
        Josef Urban; Radboud University Nijmegen, The Netherlands
        Richard Zanibbi; Rochester Institute of Technologies, USA


From MAILER-DAEMON Mon Feb 20 01:31:30 2012
Received: from list by lists.gnu.org with archive (Exim 4.71)
	id 1RzMmY-0005fe-0q
	for mharc-axiom-developer@gnu.org; Mon, 20 Feb 2012 01:31:30 -0500
Received: from eggs.gnu.org ([140.186.70.92]:50502)
	by lists.gnu.org with esmtp (Exim 4.71)
	(envelope-from <daly@axiom-developer.org>) id 1RzMmU-0005eZ-Ug
	for axiom-developer@nongnu.org; Mon, 20 Feb 2012 01:31:28 -0500
Received: from Debian-exim by eggs.gnu.org with spam-scanned (Exim 4.71)
	(envelope-from <daly@axiom-developer.org>) id 1RzMmT-0004xB-Ru
	for axiom-developer@nongnu.org; Mon, 20 Feb 2012 01:31:26 -0500
Received: from vs338.rosehosting.com ([209.135.140.38]:42516
	helo=axiom-developer.org) by eggs.gnu.org with esmtp (Exim 4.71)
	(envelope-from <daly@axiom-developer.org>) id 1RzMmT-0004wz-Lf
	for axiom-developer@nongnu.org; Mon, 20 Feb 2012 01:31:25 -0500
Received: from axiom-developer.org (lincoln.rosehosting.com [127.0.0.1])
	by axiom-developer.org (8.12.8/8.12.8) with ESMTP id q1K6VN75017820;
	Mon, 20 Feb 2012 00:31:23 -0600
From: daly@axiom-developer.org
Received: (from daly@localhost)
	by axiom-developer.org (8.12.8/8.12.8/Submit) id q1K6VNlh017817;
	Mon, 20 Feb 2012 00:31:23 -0600
Date: Mon, 20 Feb 2012 00:31:23 -0600
Message-Id: <201202200631.q1K6VNlh017817@axiom-developer.org>
To: axiom-developer@nongnu.org
X-detected-operating-system: by eggs.gnu.org: Linux 2.6? (barebone, rare!)
X-Received-From: 209.135.140.38
Subject: [Axiom-developer] running a single test case
X-BeenThere: axiom-developer@nongnu.org
X-Mailman-Version: 2.1.14
Precedence: list
List-Id: Axiom Developers <axiom-developer.nongnu.org>
List-Unsubscribe: <https://lists.nongnu.org/mailman/options/axiom-developer>, 
	<mailto:axiom-developer-request@nongnu.org?subject=unsubscribe>
List-Archive: <http://lists.nongnu.org/archive/html/axiom-developer>
List-Post: <mailto:axiom-developer@nongnu.org>
List-Help: <mailto:axiom-developer-request@nongnu.org?subject=help>
List-Subscribe: <https://lists.nongnu.org/mailman/listinfo/axiom-developer>,
	<mailto:axiom-developer-request@nongnu.org?subject=subscribe>
X-List-Received-Date: Mon, 20 Feb 2012 06:31:28 -0000

In response to an offline user query....



Axiom includes a test suite in src/input which is a set of pamphlet files.

You can run an individual test suite. There are two lisp functions built
into the lisp image, "tangle" and "regress". These will eventually be
top-level Axiom commands. The Axiom ")read" command will also be able
to directly handle latex input so these steps will be even easier.

======================================================================
RUNNING A TEST
======================================================================

To run a test, type

  axiom 
  -> )lisp (tangle "/path/foo.input.pamphlet" "*" "foo.input")
  -> )read foo

This will "tangle" the test in "/path/foo.input.pamphlet", extracting the
chunk named "*", and put the tangled output into "foo.input".
Now you have an ordinary Axiom input file which you can read.

The test "foo.input" will create a file "foo.output"

Note well, the tests all have
  )lisp (bye)
as their last statement so Axiom will exit at the end of the test.
Remove this from the input file if you don't want this behavior.

======================================================================
REGRESSION TESTING THE RESULT
======================================================================

Once a test is run you can "regression test" it with the lines
 
  axiom
  -> )lisp (regress "foo.output")

This will check that every test worked properly and that every
test was run. A summary line is printed.

======================================================================
MORE DETAILS ON TEST STRUCTURE
======================================================================

Each pamphlet file is a latex document using the \begin{chunk} \end{chunk}
environment that is defined in axiom.sty.

Each test file has the structure:

  latex header
  \begin{chunk}{*}
    axiom setup
    numbered code blocks
    axiom shutdown
  \end{chunk}
  latex footer

The latex header gives some structure to the document, including author
names,  and sometimes includes an abstract.

The code is usually in one large chunk named "*" but the extraction
routine will concatenate chunks with the same name so it is possible
to insert latex between examples, as in:
    \begin{chunk}{*}
      code block a
    \end{chunk}
      latex stuff
    \begin{chunk}{*}
      code block b
    \end{chunk}
    ...
which will generate 
       code block a
       code block b
in the tangle output.

Each test is numbered sequentially using Axiom comment lines.
Each test is structured as:

--S n of M
some-axiom-input
--R
--R the expected axiom output
--E n

Notice that everything but the 'some-axiom-input' is an Axiom comment.
The Axiom comments have a letter as the first character.

--S n of M      (start test n, of M tests)
--R             (expect exactly this output text)
--I             (ignore this line, if the compare fails pass anyway)
--E n           (end test n)

======================================================================
CREATING YOUR OWN TEST FILES
======================================================================

These files are trivial to create. You just 
  )spool foo.output
and then run a series of Axiom commands. When you are finished
  )spool
will close the output file. Now edit the "foo.output" by wrapping
each test with the "--S n of M" and the "--R" on the output lines and
the "--E n" on the end of each test, insert the latex wrappings by
copying and modifying something like src/input/algagger.input.pamphlet
and you now have a valid test file.

You can add your test file to the test suite by modifying
src/input/Makefile.pamphlet
Just find every "algaggr" and follow the pattern to add your
test file to the appropriate tables.

Tim 







